** 1. Explain the data types available in TypeScript **

JavaScript, being a dynamically typed language, provides several built-in data types that are used to represent and manipulate different kinds of data. 
Here’s an overview of the data types available in JavaScript:

### Primitive Types

1. **`number`**
   - Represents both integer and floating-point numbers.
   - JavaScript does not differentiate between integers and floating-point numbers; both are of type `number`.
   - Example: 
     ```javascript
     let age = 30;        // Integer
     let price = 19.99;   // Floating-point
     ```

2. **`string`**
   - Represents a sequence of characters enclosed in single quotes (`'`), double quotes (`"`), or backticks (`` ` `` for template literals).
   - Example: 
     ```javascript
     let name = 'Alice';
     let greeting = "Hello, world!";
     let message = `Hello, ${name}!`; // Template literal
     ```

3. **`boolean`**
   - Represents a value of `true` or `false`.
   - Example: 
     ```javascript
     let isActive = true;
     let isComplete = false;
     ```

4. **`undefined`**
   - Represents a variable that has been declared but not yet assigned a value.
   - Example: 
     ```javascript
     let unassigned;
     console.log(unassigned); // Output: undefined
     ```

5. **`null`**
   - Represents the intentional absence of any object value. It is often used to indicate that a variable should be empty.
   - Example: 
     ```javascript
     let emptyValue = null;
     ```

6. **`symbol`**
   - Represents a unique and immutable value often used as property keys. Symbols are mainly used to create object properties that are guaranteed to be unique.
   - Example: 
     ```javascript
     let sym = Symbol('description');
     ```

7. **`bigint`**
   - Represents integers with arbitrary precision. It allows you to work with numbers larger than the `Number` type can handle.
   - Example: 
     ```javascript
     let bigNum = 1234567890123456789012345678901234567890n;
     ```

### Object Types

1. **`object`**
   - Represents a collection of properties, each with a key (a string or Symbol) and a value (which can be any type).
   - Example: 
     ```javascript
     let person = {
         name: 'Alice',
         age: 30
     };
     ```

2. **`array`**
   - A special type of object used to store ordered collections of values. Arrays in JavaScript are dynamic and can hold values of any type.
   - Example: 
     ```javascript
     let numbers = [1, 2, 3, 4];
     let mixedArray = ['Alice', 30, true];
     ```

3. **`function`**
   - A special type of object that represents a block of code designed to perform a specific task. Functions can be assigned to variables, passed as arguments, 
and returned from other functions.
   - Example: 
     ```javascript
     function greet(name) {
         return `Hello, ${name}!`;
     }
     ```

4. **`date`**
   - Represents dates and times. The `Date` object is used to work with dates and times in JavaScript.
   - Example: 
     ```javascript
     let now = new Date();
     ```

5. **`regexp`**
   - Represents regular expressions, which are patterns used for matching text.
   - Example: 
     ```javascript
     let regex = /ab+c/;
     ```

### Special Data Types

1. **`NaN` (Not-a-Number)**
   - Represents a value that is not a legal number. It is typically the result of mathematical operations that do not yield a valid number.
   - Example: 
     ```javascript
     let result = 0 / 0; // NaN
     ```

2. **`Infinity` and `-Infinity`**
   - Represents positive and negative infinity, respectively. These values are used to represent values that exceed the largest number representable in JavaScript.
   - Example: 
     ```javascript
     let posInf = Infinity;
     let negInf = -Infinity;
     ```

### Type Conversion

JavaScript performs implicit type conversion (type coercion) when necessary. You can also perform explicit type conversion using functions like `String()`, 
`Number()`, `Boolean()`, etc.

**Examples:**
```javascript
let num = 42;
let str = String(num); // Converts number to string
let bool = Boolean(num); // Converts number to boolean
```

### Summary

- **Primitive Types:** `number`, `string`, `boolean`, `undefined`, `null`, `symbol`, `bigint`
- **Object Types:** `object`, `array`, `function`, `date`, `regexp`
- **Special Values:** `NaN`, `Infinity`, `-Infinity`

JavaScript's flexibility with types allows you to work with various kinds of data, but it’s important to understand how type coercion works to avoid 
unexpected behaviors in your code.
