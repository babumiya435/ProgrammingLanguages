In TypeScript (TS), string interpolation is primarily achieved through template literals, but there are other methods for combining and inserting variables into strings as well. Here are the various ways to perform string interpolation, with code examples for each.

### 1. **Template Literals**

Template literals (or template strings) allow for interpolation using `${}` syntax inside backticks (\`\`). This is the most modern and versatile way to handle string interpolation in TypeScript.

```typescript
let name: string = "Alice";
let age: number = 30;
let message: string = `Name: ${name}, Age: ${age}`;
console.log(message); // "Name: Alice, Age: 30"
```

### 2. **Concatenation with `+` Operator**

While not true interpolation, you can achieve similar results by concatenating strings and variables using the `+` operator.

```typescript
let firstName: string = "Bob";
let lastName: string = "Smith";
let fullName: string = firstName + " " + lastName;
console.log(fullName); // "Bob Smith"
```

### 3. **Concatenation with `+=` Operator**

You can also build up a string incrementally using the `+=` operator.

```typescript
let greeting: string = "Hello";
let name: string = "Charlie";
greeting += ", " + name + "!";
console.log(greeting); // "Hello, Charlie!"
```

### 4. **Using `String.concat()` Method**

The `concat()` method allows you to join multiple strings together, though itâ€™s less common for interpolation.

```typescript
let part1: string = "Hello";
let part2: string = "World";
let message: string = part1.concat(" ", part2);
console.log(message); // "Hello World"
```

### 5. **Using `Array.join()` Method**

You can use the `Array.join()` method for concatenating strings in an array, which can serve as a form of interpolation.

```typescript
let name: string = "Diana";
let age: number = 25;
let message: string = ["Name:", name, "Age:", age.toString()].join(" ");
console.log(message); // "Name: Diana Age: 25"
```

### 6. **Using Tagged Templates**

Tagged templates offer advanced interpolation options by allowing you to define custom processing functions for template literals.

```typescript
function customTag(strings: TemplateStringsArray, ...values: any[]): string {
  return strings.reduce((result, str, i) => result + str + (values[i] || ""), "");
}

let product: string = "Widget";
let price: number = 19.99;
let message: string = customTag`The price of the ${product} is $${price}.`;
console.log(message); // "The price of the Widget is $19.99."
```

### 7. **Using `String.replace()` with Placeholders**

Though not commonly used for general interpolation, `String.replace()` can be used to replace placeholders in a string.

```typescript
let template: string = "Hello, {name}!";
let name: string = "Eve";
let message: string = template.replace("{name}", name);
console.log(message); // "Hello, Eve!"
```

### 8. **Using `String.format()` in Libraries**

Some libraries, such as `sprintf-js`, provide `String.format()` methods that can be used for interpolation.

```typescript
import { sprintf } from "sprintf-js";

let name: string = "Frank";
let age: number = 40;
let message: string = sprintf("Name: %s, Age: %d", name, age);
console.log(message); // "Name: Frank, Age: 40"
```

### 9. **Using Function Templates**

You can also create functions that return interpolated strings.

```typescript
function createMessage(name: string, age: number): string {
  return `Name: ${name}, Age: ${age}`;
}

let name: string = "Grace";
let age: number = 22;
let message: string = createMessage(name, age);
console.log(message); // "Name: Grace, Age: 22"
```

### Conclusion

The most versatile and modern way to handle string interpolation in TypeScript is through template literals, which support embedded expressions and provide clean and readable syntax. Other methods, such as concatenation and tagged templates, offer additional flexibility and use cases depending on the needs of your application.