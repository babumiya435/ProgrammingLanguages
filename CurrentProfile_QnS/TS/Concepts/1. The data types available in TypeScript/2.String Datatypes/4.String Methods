In TypeScript (TS), you can use a variety of string methods for manipulating and working with strings. These methods are inherited from JavaScript and are available on the `string` prototype. Below are examples of all the key string methods with TypeScript code examples.

### 1. **`charAt(index: number): string`**

Returns the character at the specified index.

```typescript
let str: string = "Hello";
console.log(str.charAt(1)); // "e"
```

### 2. **`charCodeAt(index: number): number`**

Returns the Unicode of the character at the specified index.

```typescript
let str: string = "Hello";
console.log(str.charCodeAt(1)); // 101
```

### 3. **`codePointAt(index: number): number | undefined`**

Returns the Unicode code point value of the character at the specified index.

```typescript
let str: string = "Hello";
console.log(str.codePointAt(0)); // 72
```

### 4. **`concat(...strings: string[]): string`**

Joins two or more strings and returns a new string.

```typescript
let str1: string = "Hello";
let str2: string = "World";
console.log(str1.concat(" ", str2)); // "Hello World"
```

### 5. **`includes(searchString: string, position?: number): boolean`**

Checks if the string contains a specified substring.

```typescript
let str: string = "Hello, world!";
console.log(str.includes("world")); // true
```

### 6. **`endsWith(searchString: string, length?: number): boolean`**

Checks if the string ends with the specified substring.

```typescript
let str: string = "Hello, world!";
console.log(str.endsWith("world!")); // true
```

### 7. **`indexOf(searchValue: string, fromIndex?: number): number`**

Returns the index of the first occurrence of the specified value.

```typescript
let str: string = "Hello, world!";
console.log(str.indexOf("world")); // 7
```

### 8. **`lastIndexOf(searchValue: string, fromIndex?: number): number`**

Returns the index of the last occurrence of the specified value.

```typescript
let str: string = "Hello, world! Hello!";
console.log(str.lastIndexOf("Hello")); // 13
```

### 9. **`localeCompare(compareString: string, locales?: string | string[], options?: Intl.CollatorOptions): number`**

Compares two strings in the current locale.

```typescript
let str1: string = "apple";
let str2: string = "banana";
console.log(str1.localeCompare(str2)); // -1
```

### 10. **`match(regexp: RegExp | string): RegExpMatchArray | null`**

Searches a string for a match against a regular expression.

```typescript
let str: string = "The rain in Spain";
let result: RegExpMatchArray | null = str.match(/ain/g);
console.log(result); // ["ain", "ain"]
```

### 11. **`matchAll(regexp: RegExp): IterableIterator<RegExpMatchArray>`**

Returns an iterator of all results matching a string against a regular expression.

```typescript
let str: string = "test1 test2";
let regex: RegExp = /t(e)(st(\d?))/g;
for (let match of str.matchAll(regex)) {
  console.log(match);
}
```

### 12. **`normalize(form?: string): string`**

Returns the Unicode Normalization Form of the string.

```typescript
let str: string = "á";
console.log(str.normalize("NFD")); // "á"
```

### 13. **`padEnd(targetLength: number, padString?: string): string`**

Pads the current string with another string (repeated, if necessary) from the end until the target length is reached.

```typescript
let str: string = "5";
console.log(str.padEnd(3, "0")); // "500"
```

### 14. **`padStart(targetLength: number, padString?: string): string`**

Pads the current string with another string (repeated, if necessary) from the start until the target length is reached.

```typescript
let str: string = "5";
console.log(str.padStart(3, "0")); // "005"
```

### 15. **`repeat(count: number): string`**

Returns a new string with a specified number of copies of an existing string.

```typescript
let str: string = "Hello";
console.log(str.repeat(3)); // "HelloHelloHello"
```

### 16. **`replace(searchValue: string | RegExp, newValue: string): string`**

Replaces the first occurrence of a substring or pattern with a new string.

```typescript
let str: string = "Hello, world!";
console.log(str.replace("world", "everyone")); // "Hello, everyone!"
```

### 17. **`replaceAll(searchValue: string | RegExp, newValue: string): string`**

Replaces all occurrences of a substring or pattern with a new string.

```typescript
let str: string = "Hello, world! Hello, everyone!";
console.log(str.replaceAll("Hello", "Hi")); // "Hi, world! Hi, everyone!"
```

### 18. **`search(regexp: RegExp | string): number`**

Searches for a match between a regular expression and this string.

```typescript
let str: string = "The rain in Spain";
console.log(str.search("Spain")); // 12
```

### 19. **`slice(start: number, end?: number): string`**

Extracts a section of a string and returns it as a new string.

```typescript
let str: string = "Hello, world!";
console.log(str.slice(0, 5)); // "Hello"
```

### 20. **`split(separator: string | RegExp, limit?: number): string[]`**

Splits a string into an array of substrings.

```typescript
let str: string = "apple,banana,cherry";
console.log(str.split(",")); // ["apple", "banana", "cherry"]
```

### 21. **`startsWith(searchString: string, position?: number): boolean`**

Checks if the string starts with the specified substring.

```typescript
let str: string = "Hello, world!";
console.log(str.startsWith("Hello")); // true
```

### 22. **`substring(start: number, end?: number): string`**

Returns a substring between the specified indices.

```typescript
let str: string = "Hello, world!";
console.log(str.substring(0, 5)); // "Hello"
```

### 23. **`toLowerCase(): string`**

Converts the string to lowercase.

```typescript
let str: string = "Hello, World!";
console.log(str.toLowerCase()); // "hello, world!"
```

### 24. **`toLocaleLowerCase(locales?: string | string[]): string`**

Converts the string to lowercase, respecting the locale's rules.

```typescript
let str: string = "Hello, World!";
console.log(str.toLocaleLowerCase()); // "hello, world!"
```

### 25. **`toUpperCase(): string`**

Converts the string to uppercase.

```typescript
let str: string = "Hello, World!";
console.log(str.toUpperCase()); // "HELLO, WORLD!"
```

### 26. **`toLocaleUpperCase(locales?: string | string[]): string`**

Converts the string to uppercase, respecting the locale's rules.

```typescript
let str: string = "Hello, World!";
console.log(str.toLocaleUpperCase()); // "HELLO, WORLD!"
```

### 27. **`trim(): string`**

Removes whitespace from both ends of the string.

```typescript
let str: string = "   Hello, world!   ";
console.log(str.trim()); // "Hello, world!"
```

### 28. **`trimStart(): string`**

Removes whitespace from the start of the string.

```typescript
let str: string = "   Hello, world!";
console.log(str.trimStart()); // "Hello, world!"
```

### 29. **`trimEnd(): string`**

Removes whitespace from the end of the string.

```typescript
let str: string = "Hello, world!   ";
console.log(str.trimEnd()); // "Hello, world!"
```

### 30. **`valueOf(): string`**

Returns the primitive value of a `String` object.

```typescript
let str: string = new String("Hello") as unknown as string;
console.log(str.valueOf()); // "Hello"
```

These methods provide a comprehensive set of tools for string manipulation in TypeScript, allowing for a wide range of operations on string values.