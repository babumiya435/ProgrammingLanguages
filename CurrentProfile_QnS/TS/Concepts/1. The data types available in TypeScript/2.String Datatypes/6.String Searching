In TypeScript, which is built on JavaScript, you can use a variety of methods to search for substrings within strings. Here are the different ways to perform string searching, with examples for each:

### 1. **`indexOf(searchString, fromIndex)`**
Finds the first occurrence of a substring and returns its index. Returns `-1` if not found.

```typescript
let str: string = "Hello World";
console.log(str.indexOf("World")); // 6
console.log(str.indexOf("world")); // -1
console.log(str.indexOf("o", 5)); // 7 (starts search from index 5)
```

### 2. **`lastIndexOf(searchString, fromIndex)`**
Finds the last occurrence of a substring and returns its index. Returns `-1` if not found.

```typescript
let str: string = "Hello World, World";
console.log(str.lastIndexOf("World")); // 13
console.log(str.lastIndexOf("world")); // -1
console.log(str.lastIndexOf("o", 10)); // 7 (searches up to index 10)
```

### 3. **`search(regexp)`**
Searches for a match between a regular expression and the string. Returns the index of the match or `-1` if not found.

```typescript
let str: string = "The rain in Spain";
console.log(str.search(/Spain/)); // 12
console.log(str.search(/rain/)); // 4
console.log(str.search(/abc/)); // -1
```

### 4. **`match(regexp)`**
Executes a search for a match between a regular expression and the string, and returns an array of matches.

```typescript
let str: string = "The rain in Spain";
console.log(str.match(/rain/)); // ["rain"]
console.log(str.match(/ain/g)); // ["ain", "ain"]
console.log(str.match(/abc/)); // null
```

### 5. **`includes(searchString, position)`**
Checks if the string contains the specified substring. Returns `true` or `false`.

```typescript
let str: string = "Hello World";
console.log(str.includes("World")); // true
console.log(str.includes("world")); // false
console.log(str.includes("o", 5)); // true (searches starting from index 5)
```

### 6. **`startsWith(searchString, position)`**
Checks if the string starts with the specified substring. Returns `true` or `false`.

```typescript
let str: string = "Hello World";
console.log(str.startsWith("Hello")); // true
console.log(str.startsWith("World")); // false
console.log(str.startsWith("World", 6)); // true (starts search from index 6)
```

### 7. **`endsWith(searchString, length)`**
Checks if the string ends with the specified substring. Returns `true` or `false`.

```typescript
let str: string = "Hello World";
console.log(str.endsWith("World")); // true
console.log(str.endsWith("Hello")); // false
console.log(str.endsWith("World", 11)); // true (checks up to index 11)
```

### 8. **`matchAll(regexp)`**
Returns an iterator of all matches for the regular expression, including capturing groups.

```typescript
let str: string = "The rain in Spain";
let matches = str.matchAll(/ain/g);
for (let match of matches) {
    console.log(match[0]); // "ain" (multiple matches)
}
```

### 9. **`replace(searchValue, replaceValue)`**
Replaces the first occurrence of a specified value or regular expression.

```typescript
let str: string = "Hello World";
console.log(str.replace("World", "JavaScript")); // "Hello JavaScript"
```

### 10. **`replaceAll(searchValue, replaceValue)`**
Replaces all occurrences of a specified value or regular expression.

```typescript
let str: string = "Hello World, World";
console.log(str.replaceAll("World", "JavaScript")); // "Hello JavaScript, JavaScript"
```

### 11. **`slice(start, end)`**
Extracts a section of a string and returns it as a new string.

```typescript
let str: string = "Hello World";
console.log(str.slice(0, 5)); // "Hello"
console.log(str.slice(6)); // "World"
console.log(str.slice(-5)); // "World" (negative index)
```

### 12. **`substring(indexStart, indexEnd)`**
Returns a substring from the start index to the end index.

```typescript
let str: string = "Hello World";
console.log(str.substring(0, 5)); // "Hello"
console.log(str.substring(6)); // "World"
console.log(str.substring(6, 0)); // "Hello" (start is greater than end)
```

### 13. **`trim()`**
Removes whitespace from both ends of the string.

```typescript
let str: string = "   Hello World   ";
console.log(str.trim()); // "Hello World"
```

### 14. **`trimStart()` or `trimLeft()`**
Removes whitespace from the beginning of the string.

```typescript
let str: string = "   Hello World";
console.log(str.trimStart()); // "Hello World"
```

### 15. **`trimEnd()` or `trimRight()`**
Removes whitespace from the end of the string.

```typescript
let str: string = "Hello World   ";
console.log(str.trimEnd()); // "Hello World"
```

These methods provide various ways to search and manipulate strings in TypeScript, utilizing both basic string operations and regular expressions for more complex searches.