In TypeScript, `null` is a special value that represents the intentional absence of any object value. It is used to indicate that a variable has no value or that it has not been initialized. Here are key facts and methods related to the `null` type in TypeScript, along with code examples:

### Key Facts about `null` in TypeScript

1. **Type Declaration**: By default, `null` is a subtype of all types. However, when using TypeScript's strict null checks, `null` and `undefined` are not assignable to any other types unless explicitly allowed.

2. **Strict Null Checks**: When `strictNullChecks` is enabled in `tsconfig.json`, `null` is only assignable to `null` and `undefined` (and to `any`).

   ```json
   // tsconfig.json
   {
     "compilerOptions": {
       "strictNullChecks": true
     }
   }
   ```

3. **Type Inference**: If `strictNullChecks` is disabled, `null` can be assigned to any type without an error.

4. **`null` vs `undefined`**: In TypeScript, `null` represents an explicitly assigned "no value," whereas `undefined` represents a value that has not been assigned.

### Basic Examples

#### 1. **Declaring and Assigning `null`**

```typescript
let value: string | null = null; // `value` can be a string or null
value = "Hello"; // Assigning a string
value = null; // Assigning null
```

#### 2. **Strict Null Checks Example**

```typescript
let value: string | null = null;

// This will cause an error if strictNullChecks is enabled
// let anotherValue: string = value; 

// Correct way to handle it
if (value !== null) {
  let anotherValue: string = value; // Safe to assign
}
```

### Methods and Use Cases

#### 1. **Checking for `null`**

Using conditionals to check if a value is `null`.

```typescript
let value: string | null = null;

if (value === null) {
  console.log("Value is null");
} else {
  console.log("Value is not null");
}
```

#### 2. **Default Values Using Nullish Coalescing**

The nullish coalescing operator (`??`) provides a default value if the expression on the left is `null` or `undefined`.

```typescript
let value: string | null = null;
let defaultValue = value ?? "Default Value";
console.log(defaultValue); // "Default Value"
```

#### 3. **Using `null` with Optional Chaining**

Optional chaining (`?.`) allows safe access to nested properties that may be `null` or `undefined`.

```typescript
interface Person {
  name?: {
    firstName: string;
  };
}

let person: Person = {};
let firstName = person.name?.firstName ?? "Anonymous";
console.log(firstName); // "Anonymous"
```

#### 4. **Function Arguments and Return Types**

Specifying `null` in function arguments and return types.

```typescript
function greet(name: string | null): string {
  return name === null ? "Hello, Guest!" : `Hello, ${name}!`;
}

console.log(greet("Alice")); // "Hello, Alice!"
console.log(greet(null)); // "Hello, Guest!"
```

#### 5. **Using `null` in Type Guards**

Type guards can help narrow down types when dealing with `null`.

```typescript
function processValue(value: string | null) {
  if (value !== null) {
    // TypeScript knows `value` is a string here
    console.log(value.toUpperCase());
  } else {
    console.log("No value provided");
  }
}
```

### Summary of Methods

1. **Direct Assignment**: `let value: type | null = null;`
2. **Type Guards**: Checking with `if (value === null)` or `if (value !== null)`
3. **Nullish Coalescing (`??`)**: Provides default value for `null` or `undefined`
4. **Optional Chaining (`?.`)**: Safely access properties that may be `null` or `undefined`

In TypeScript, handling `null` effectively involves using strict null checks to avoid unexpected runtime errors and ensure that your code correctly handles cases where values might be `null`.