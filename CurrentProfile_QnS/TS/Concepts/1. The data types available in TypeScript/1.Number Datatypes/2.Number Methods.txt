TypeScript, like JavaScript, uses the `number` data type to represent both integer and floating-point numbers. It provides various methods and properties for working with numbers. Below are all the possible number-related methods and properties available in TypeScript, along with code examples:

### 1. **Number Properties**
- **`Number.MAX_VALUE`**: The maximum numeric value representable in JavaScript.
- **`Number.MIN_VALUE`**: The smallest positive numeric value representable in JavaScript.
- **`Number.POSITIVE_INFINITY`**: Represents positive infinity.
- **`Number.NEGATIVE_INFINITY`**: Represents negative infinity.
- **`Number.NaN`**: Represents a value that is "Not-a-Number".

```typescript
console.log(Number.MAX_VALUE); // 1.7976931348623157e+308
console.log(Number.MIN_VALUE); // 5e-324
console.log(Number.POSITIVE_INFINITY); // Infinity
console.log(Number.NEGATIVE_INFINITY); // -Infinity
console.log(Number.NaN); // NaN
```

### 2. **Number Methods**

#### A. **`toString()`**
Returns a string representing the number.

```typescript
let num: number = 123;
console.log(num.toString()); // "123"
console.log(num.toString(2)); // "1111011" (binary representation)
console.log(num.toString(16)); // "7b" (hexadecimal representation)
```

#### B. **`toFixed()`**
Formats a number using fixed-point notation.

```typescript
let pi: number = 3.14159;
console.log(pi.toFixed(2)); // "3.14"
```

#### C. **`toExponential()`**
Returns a string representing the number in exponential notation.

```typescript
let largeNumber: number = 123456;
console.log(largeNumber.toExponential(2)); // "1.23e+5"
```

#### D. **`toPrecision()`**
Formats a number to a specified precision in decimal places.

```typescript
let num2: number = 5.6789;
console.log(num2.toPrecision(2)); // "5.7"
console.log(num2.toPrecision(4)); // "5.679"
```

#### E. **`valueOf()`**
Returns the primitive value of a number object.

```typescript
let objNum: Number = new Number(123);
console.log(objNum.valueOf()); // 123
```

### 3. **Global Number Methods**

#### A. **`parseInt()`**
Parses a string argument and returns an integer of the specified radix (base).

```typescript
console.log(parseInt("123")); // 123
console.log(parseInt("101", 2)); // 5 (binary to decimal)
```

#### B. **`parseFloat()`**
Parses a string argument and returns a floating-point number.

```typescript
console.log(parseFloat("3.14")); // 3.14
```

#### C. **`isNaN()`**
Determines whether a value is NaN.

```typescript
console.log(isNaN(NaN)); // true
console.log(isNaN(123)); // false
console.log(isNaN("hello")); // true
```

#### D. **`isFinite()`**
Determines whether a value is a finite number.

```typescript
console.log(isFinite(123)); // true
console.log(isFinite(Infinity)); // false
console.log(isFinite(-Infinity)); // false
```

### 4. **Number Object Methods**
TypeScript also supports `Number` object methods that are not methods of the `number` type but are globally available methods.

#### A. **`Number.isInteger()`**
Determines whether the provided value is an integer.

```typescript
console.log(Number.isInteger(123)); // true
console.log(Number.isInteger(123.456)); // false
```

#### B. **`Number.isSafeInteger()`**
Determines whether the provided value is a safe integer (an integer within the safe range for JavaScript).

```typescript
console.log(Number.isSafeInteger(9007199254740991)); // true
console.log(Number.isSafeInteger(9007199254740992)); // false
```

#### C. **`Number.isNaN()`**
Determines whether the provided value is NaN and of type `number`.

```typescript
console.log(Number.isNaN(NaN)); // true
console.log(Number.isNaN("hello")); // false
```

These are the primary methods and properties associated with the `number` type in TypeScript, providing various functionalities for numeric data manipulation and conversion.