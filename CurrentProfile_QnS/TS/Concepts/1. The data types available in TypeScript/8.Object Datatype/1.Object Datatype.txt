In TypeScript, the `object` data type is used to represent non-primitive values, including arrays, functions, and other user-defined types. The `object` type is a broad type that encompasses any value that is not a primitive. Here are the key facts and methods associated with the `object` data type in TypeScript, along with code examples:

### 1. **Creating Objects**

#### Literal Notation
```typescript
let person: object = {
  name: "Alice",
  age: 30
};
```

#### Using `Object` Constructor
```typescript
let person = new Object({
  name: "Bob",
  age: 25
});
```

### 2. **Object Properties**

You can access and modify object properties using dot notation or bracket notation.

#### Dot Notation
```typescript
let person = {
  name: "Charlie",
  age: 35
};
console.log(person.name); // "Charlie"
person.age = 36;
console.log(person.age); // 36
```

#### Bracket Notation
```typescript
let person = {
  name: "Diana",
  age: 40
};
console.log(person["name"]); // "Diana"
person["age"] = 41;
console.log(person["age"]); // 41
```

### 3. **Object Methods**

#### `Object.keys(obj)`
Returns an array of a given object's own enumerable property names.

```typescript
let person = {
  name: "Eve",
  age: 45
};
console.log(Object.keys(person)); // ["name", "age"]
```

#### `Object.values(obj)`
Returns an array of a given object's own enumerable property values.

```typescript
let person = {
  name: "Frank",
  age: 50
};
console.log(Object.values(person)); // ["Frank", 50]
```

#### `Object.entries(obj)`
Returns an array of a given object's own enumerable string-keyed property `[key, value]` pairs.

```typescript
let person = {
  name: "Grace",
  age: 55
};
console.log(Object.entries(person)); // [["name", "Grace"], ["age", 55]]
```

#### `Object.assign(target, ...sources)`
Copies values from one or more source objects to a target object.

```typescript
let target = { a: 1 };
let source = { b: 2, c: 3 };
Object.assign(target, source);
console.log(target); // { a: 1, b: 2, c: 3 }
```

#### `Object.freeze(obj)`
Freezes an object, preventing new properties from being added and existing properties from being removed or modified.

```typescript
let person = {
  name: "Hannah",
  age: 60
};
Object.freeze(person);
person.age = 61; // This will not work
console.log(person.age); // 60
```

#### `Object.seal(obj)`
Seals an object, preventing new properties from being added but allowing modification of existing properties.

```typescript
let person = {
  name: "Ian",
  age: 65
};
Object.seal(person);
person.age = 66; // This works
console.log(person.age); // 66
delete person.name; // This will not work
console.log(person.name); // "Ian"
```

#### `Object.getPrototypeOf(obj)`
Returns the prototype (i.e., the internal `[[Prototype]]`) of the specified object.

```typescript
let person = {
  name: "Jane"
};
console.log(Object.getPrototypeOf(person)); // {} (or a more complex prototype in real use cases)
```

#### `Object.setPrototypeOf(obj, prototype)`
Sets the prototype (i.e., the internal `[[Prototype]]`) of a specified object.

```typescript
let person = {
  name: "John"
};
Object.setPrototypeOf(person, { greet() { return "Hello"; } });
console.log(person.greet()); // "Hello"
```

### 4. **Object Property Descriptors**

#### `Object.getOwnPropertyDescriptor(obj, prop)`
Returns a property descriptor for a named property of an object.

```typescript
let person = {
  name: "Kate"
};
console.log(Object.getOwnPropertyDescriptor(person, "name"));
// { value: 'Kate', writable: true, enumerable: true, configurable: true }
```

#### `Object.defineProperty(obj, prop, descriptor)`
Defines a new property or modifies an existing property on an object.

```typescript
let person = {};
Object.defineProperty(person, "name", {
  value: "Laura",
  writable: false,
  enumerable: true,
  configurable: true
});
console.log(person.name); // "Laura"
```

### 5. **Object Type Checking**

#### Type Guards
Type guards help in checking and asserting the type of an object.

```typescript
function isPerson(obj: any): obj is { name: string; age: number } {
  return obj && typeof obj.name === "string" && typeof obj.age === "number";
}

let obj = { name: "Mike", age: 70 };
if (isPerson(obj)) {
  console.log(obj.name); // "Mike"
}
```

### 6. **Object Literal Enhancements**

#### Computed Property Names
Allows dynamic property names in object literals.

```typescript
let key = "age";
let person = {
  name: "Nina",
  [key]: 75
};
console.log(person.age); // 75
```

#### Method Definitions
Allows defining methods directly within an object literal.

```typescript
let person = {
  name: "Olivia",
  greet() {
    return `Hello, my name is ${this.name}`;
  }
};
console.log(person.greet()); // "Hello, my name is Olivia"
```

### Summary

These facts and methods provide a comprehensive overview of working with objects in TypeScript. The `object` data type in TypeScript is versatile, and understanding these methods helps in manipulating and interacting with objects effectively.