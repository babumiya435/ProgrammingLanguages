In JavaScript, creating string templates with expressions can be done in several ways. Hereâ€™s a comprehensive overview of different methods and techniques for creating and using string templates with expressions:

### 1. **Template Literals (ES6)**
Template literals use backticks (\``) and allow embedding expressions using `${}` syntax.

```javascript
let name = "Alice";
let age = 30;
let greeting = `Hello, my name is ${name} and I am ${age} years old.`;
console.log(greeting); // "Hello, my name is Alice and I am 30 years old."
```

### 2. **Expression Evaluation in Template Literals**
You can include any JavaScript expression inside `${}` within template literals.

```javascript
let a = 5;
let b = 10;
let result = `The sum of ${a} and ${b} is ${a + b}.`;
console.log(result); // "The sum of 5 and 10 is 15."
```

### 3. **Function Calls in Template Literals**
You can call functions within `${}` in template literals.

```javascript
function getGreeting() {
    return "Hello";
}

let name = "Bob";
let greeting = `${getGreeting()}, ${name}!`;
console.log(greeting); // "Hello, Bob!"
```

### 4. **Nested Template Literals**
You can nest template literals to create more complex expressions.

```javascript
let firstName = "John";
let lastName = "Doe";
let fullName = `${firstName} ${lastName}`;
let greeting = `Hello, ${fullName}`;
console.log(greeting); // "Hello, John Doe"
```

### 5. **Tagged Template Literals**
Tagged template literals allow you to parse template literals with a function. The function can process the template and expressions.

```javascript
function tag(strings, ...values) {
    let result = "";
    strings.forEach((str, i) => {
        result += str + (values[i] || "");
    });
    return result;
}

let name = "Charlie";
let age = 25;
let message = tag`Hello, my name is ${name} and I am ${age} years old.`;
console.log(message); // "Hello, my name is Charlie and I am 25 years old."
```

### 6. **Multiline Template Literals**
Template literals can span multiple lines and include expressions.

```javascript
let name = "Dana";
let age = 28;
let bio = `Name: ${name}
Age: ${age}
Occupation: Software Developer`;
console.log(bio);
// Output:
// Name: Dana
// Age: 28
// Occupation: Software Developer
```

### 7. **Conditional Expressions in Template Literals**
You can include conditional expressions within template literals.

```javascript
let isMember = true;
let message = `You ${isMember ? 'are' : 'are not'} a member.`;
console.log(message); // "You are a member."
```

### 8. **Expression Result Formatting**
You can use expressions to format results within template literals.

```javascript
let amount = 1234.56;
let formatted = `The total amount is $${amount.toFixed(2)}.`;
console.log(formatted); // "The total amount is $1234.56."
```

### 9. **Escaping Backticks in Template Literals**
You can include backticks within template literals using escaped backticks.

```javascript
let value = `\`Escaped\``;
let message = `Here is a backtick: ${value}`;
console.log(message); // "Here is a backtick: `Escaped`"
```

### 10. **Using Expressions with Objects**
You can use object properties and methods in template literals.

```javascript
let person = {
    firstName: "Eve",
    lastName: "Smith",
    getFullName() {
        return `${this.firstName} ${this.lastName}`;
    }
};

let greeting = `Hello, ${person.getFullName()}!`;
console.log(greeting); // "Hello, Eve Smith!"
```

These methods provide various ways to create and use string templates with expressions in JavaScript, allowing for flexible and dynamic string generation.