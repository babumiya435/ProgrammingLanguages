In JavaScript, there are several ways to create multiline strings. Hereâ€™s a comprehensive list of methods for creating multiline strings with code examples:

### 1. **Template Literals (ES6)**
Template literals, using backticks (\``), allow for straightforward multiline strings.

```javascript
let multiline = `This is a string
that spans multiple
lines.`;
console.log(multiline);
// Output:
// This is a string
// that spans multiple
// lines.
```

### 2. **String Concatenation with `+` Operator**
Concatenating strings using `+` and newline characters (`\n`).

```javascript
let multiline = "This is a string\n" +
                "that spans multiple\n" +
                "lines.";
console.log(multiline);
// Output:
// This is a string
// that spans multiple
// lines.
```

### 3. **Using `concat()` Method**
Concatenating strings using the `concat()` method.

```javascript
let multiline = "This is a string".concat("\n", "that spans multiple", "\n", "lines.");
console.log(multiline);
// Output:
// This is a string
// that spans multiple
// lines.
```

### 4. **Using Array `join()` Method**
Joining an array of strings with newline characters.

```javascript
let parts = [
  "This is a string",
  "that spans multiple",
  "lines."
];
let multiline = parts.join("\n");
console.log(multiline);
// Output:
// This is a string
// that spans multiple
// lines.
```

### 5. **Using Escaped Newlines with String Literals**
Using escaped newline characters (`\`) in string literals (though this is less common and not as readable).

```javascript
let multiline = "This is a string\n\
that spans multiple\n\
lines.";
console.log(multiline);
// Output:
// This is a string
// that spans multiple
// lines.
```

### 6. **Using String `split()` Method**
Splitting a multiline string into an array and then joining it with `\n`.

```javascript
let multilineArray = [
  "This is a string",
  "that spans multiple",
  "lines."
];
let multiline = multilineArray.split('\n').join('\n');
console.log(multiline);
// Output:
// This is a string
// that spans multiple
// lines.
```

### 7. **Using Template Literals with Expressions**
You can also use expressions inside template literals for multiline strings.

```javascript
let part1 = "This is a string";
let part2 = "that spans multiple";
let part3 = "lines.";

let multiline = `${part1}
${part2}
${part3}`;
console.log(multiline);
// Output:
// This is a string
// that spans multiple
// lines.
```

### 8. **Using Raw String Literals (`String.raw`)**
Creating raw strings where backslashes and other escape sequences are treated as literals.

```javascript
let multiline = String.raw`This is a string
that spans multiple
lines.`;
console.log(multiline);
// Output:
// This is a string
// that spans multiple
// lines.
```

### 9. **Using a Function to Generate Multiline Strings**
A function that generates a multiline string.

```javascript
function createMultiline() {
  return `This is a string
that spans multiple
lines.`;
}

let multiline = createMultiline();
console.log(multiline);
// Output:
// This is a string
// that spans multiple
// lines.
```

These methods provide various approaches to handling multiline strings in JavaScript, ranging from modern and readable techniques like template literals to more traditional methods involving string concatenation.