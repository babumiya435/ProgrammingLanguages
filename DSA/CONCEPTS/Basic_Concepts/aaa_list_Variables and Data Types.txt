**************** list_Variables and Data Types ***************
*******C********

Here's a list of common variable types you can create in C:

    Integer Variables: 
        Used to store whole numbers without decimal points.
        int: Standard integer type, typically 4 bytes in size.
        short: Short integer type, typically 2 bytes in size.
        long: Long integer type, typically 4 or 8 bytes in size.
        unsigned int: Unsigned integer type, which can only store non-negative integers.
        signed int: Signed integer type, which can store both positive and negative integers.

    Floating-point Variables: 
        Used to store numbers with decimal points.
        float: Single-precision floating-point type, typically 4 bytes in size.
        double: Double-precision floating-point type, typically 8 bytes in size.

    Character Variables: 
        Used to store individual characters.
        char: Character type, typically 1 byte in size.

    Boolean Variables: 
        Used to store true/false values.
        bool: Boolean type, which can have values true or false. In C, boolean values are typically represented using integers (0 for false, non-zero for true), but you can define boolean variables using stdbool.h header in modern C.

    Pointers: 
        Used to store memory addresses.
        Pointers to any of the above types, e.g., int*, float*, char*, etc.

    Arrays: 
        Used to store multiple values of the same type.
        Arrays of any of the above types, e.g., int[], float[], char[], etc.

    Structures: 
        Used to group related variables under a single name.
        struct: User-defined composite type that can contain variables of different types.

    Enums: 
        Used to define named integer constants.
        enum:User-defined type with a fixed set of named values.

    Void Variables: 
        Used to represent the absence of type information.
        void: Special type used as the return type of functions that do not return a value, and as a generic pointer type.

    User-defined Types: 
        You can define your own custom types using typedef.

*******C********
***************************************************************************************
*******JAVA********

Here's a list of common variable types in Java:

    Primitive Data Types: 
        These are the basic data types provided by Java.
        byte: 8-bit integer
        short: 16-bit integer
        int: 32-bit integer
        long: 64-bit integer
        float: 32-bit floating point number
        double: 64-bit floating point number
        char: 16-bit Unicode character
        boolean: Represents true or false
    Reference Data Types: 
        These are non-primitive data types that refer to objects.
        String: Represents a sequence of characters
        Arrays: Represents a collection of elements of the same type
        Classes: User-defined types
        Interfaces: Defines a set of methods that a class must implement
        Enums: Represents a fixed set of constants

    Local Variables: 
        Variables declared within a method, constructor, or block.
    
    Instance Variables (Fields): 
        Variables declared within a class but outside any method, constructor, or block. 
        Each instance of the class has its own copy of instance variables.
    
    Static Variables (Class Variables): 
    Variables declared with the static keyword within a class but outside any method, constructor, or block. 
    They are shared among all instances of the class.

    Constants: 
    Variables declared with the final modifier whose value cannot be changed once initialized.

*******JAVA********
*****************************************************************************
*******PYTHON********

    Integer (int): 
        Represents whole numbers without any decimal point. For example: x = 10.
    Float (float): 
        Represents decimal numbers. For example: y = 3.14.
    String (str): 
        Represents a sequence of characters enclosed in single, double, or triple quotes. For example: name = "John".
    Boolean (bool): 
        Represents a boolean value, either True or False. For example: is_valid = True.
    List (list): 
        Represents an ordered collection of items. Lists are mutable, meaning their elements can be changed. For example: numbers = [1, 2, 3, 4, 5].
    Tuple (tuple): 
        Represents an ordered collection of items similar to a list, but tuples are immutable. For example: coordinates = (10, 20).
    Dictionary (dict): 
        Represents a collection of key-value pairs. Each key is associated with a value, and keys must be unique within a dictionary. For example: person = {"name": "John", "age": 30}.
    Set (set): 
        Represents an unordered collection of unique items. Sets do not allow duplicate elements. For example: unique_numbers = {1, 2, 3, 4, 5}.
    NoneType (None): 
        Represents the absence of a value or a null value. It is commonly used to indicate that a variable has not been assigned a value yet. For example: result = None.

*******PYTHON********
*****************************************************************************
*******JAVA SCRIPT********

    var: 
        Declares a variable that can be reassigned and redeclared within its scope.
    let: 
        Declares a block-scoped variable that can be reassigned but not redeclared within its scope.
    const: 
        Declares a block-scoped variable that cannot be reassigned or redeclared within its scope. The value is immutable.
    Global Variables: 
        Variables declared outside of any function or block scope become global variables.
    Function-scoped Variables: 
        Variables declared within a function are function-scoped and are accessible only within that function.
    Block-scoped 
        Variables: Variables declared within a block (enclosed by curly braces) using let or const are block-scoped.
    Object Properties: 
        Variables can be properties of objects.
    Array Elements: 
        Variables can be elements of arrays.
    Function Parameters: 
        Variables can be function parameters.
    Template Literals: 
        Variables can be interpolated within template literals using ${}.
    Destructuring Assignment: 
        Variables can be extracted from objects or arrays using destructuring assignment.
    Dynamic Properties: 
        Variables can be dynamic properties of objects.

*******JAVA SCRIPT********
*****************************************************************************
*******TYPE SCRIPT********

    Boolean: 
        Represents a logical value, true or false.
    Number: 
        Represents numeric values, including integers and floating-point numbers.
    String: 
        Represents textual data.
    Array: 
        Represents a collection of elements of the same type.
    Tuple: 
        Represents an array with a fixed number of elements where each element may have a different type.
    Enum: 
        Represents a set of named constants.
    Any: 
        Represents any type, allowing for dynamic typing.
    Void: 
        Represents the absence of a type. Typically used as the return type of functions that do not return a value.
    Null and Undefined: 
        Represents the absence of a value.
    Object: 
        Represents any JavaScript object.
    Never: 
        Represents the type of values that never occur. Used as the return type of functions that always throw exceptions or never return.

*******TYPE SCRIPT********
*****************************************************************************
