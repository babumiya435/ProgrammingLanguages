*********** HelloWorld program in Javascript Programming Language ***************
        
        I Know
1.Printing to console
    console.log("Hello World");
2.Printing as alert
    alert("Hello World");
3.Printing as error
    console.error("Hello World");
4.Printing as directory
    console.dir("Hello World");

****************************************************************************************
Sure, here are examples of different types of console log statements in JavaScript:

1. **`console.log()`**: Used for general logging and debugging purposes.

```javascript
console.log("This is a log message.");
```

2. **`console.error()`**: Used to log error messages intentional.

```javascript
console.error("This is an error message.");
```

3. **`console.warn()`**: Used to log warning messages intentional.

```javascript
console.warn("This is a warning message.");
```

4. **`console.info()`**: Used to log informational messages.

```javascript
console.info("This is an informational message.");
```

5. **`console.debug()`**: Used to log debug messages.

```javascript
console.debug("This is a debug message.");
```

6. **`console.dir()`**: Used to display an interactive list of the properties of a specified JavaScript object.

```javascript
const obj = { name: "John", age: 30 };
console.dir(obj);
```

7. **`console.table()`**: Used to display tabular data as a table.

```javascript
const data = [
  { name: "John", age: 30 },
  { name: "Jane", age: 25 },
  { name: "Bob", age: 40 }
];
console.table(data);
```

8. **`console.assert()`**: Used to log a message if an assertion is false.

```javascript
console.assert(2 + 2 === 5, "Error: Math is broken!");
```

These are some of the commonly used console log statements in JavaScript, each serving different purposes in logging and debugging.
************************************************************************************************
    1.log
      https://developer.mozilla.org/en-US/docs/Web/API/console/log_static
      console: log() static method
      The console.log() static method outputs a message to the console. 
      The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.

      
      ex:
        problem: (objects are lazily retrieved at the time of expansion in dev tool console)
          const org = {fruits:["banana","apple"]}
          console.log(org.fruits);  //--> prints an object ; if we expand it in the dev tools console will get updated object(org)
          org.fruits.push("grapes");
        Solution: 
          1. structuredClone(org) --> used to deep copy the object
          2. JSON.parse(JSON.stringify(org));
          3. Object.freeze(org);
      

    2.info
    3.error
    4.warn
    5.dir
    6.assert
    7.table
    8.debug
    9.time
    10.endTime
    11.timeLog
    12.timeStamp
    13.trace
    14.group
    15.groupEnd
    16.groupCollapsed
    17.clear
    18.count
    19.countReset
    20.dirxml
    21.profile
    22.profileEnd
************************************************************************************************
************************************************************************************************
************************************************************************************************
************************************************************************************************
************************************************************************************************
************************************************************************************************
************************************************************************************************
************************************************************************************************
************************************************************************************************
************************************************************************************************